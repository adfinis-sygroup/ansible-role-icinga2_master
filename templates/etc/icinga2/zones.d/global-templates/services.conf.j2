/**
 *  {{ ansible_managed }}
 *  Configuration from Icinga2 version r2.10.2-1
 */

/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
  ignore where host.check_command == "icinga"
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
  ignore where host.check_command == "icinga"
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service for (by_ssh => config in host.vars.by_ssh) {
  import "generic-service"

  check_command = "by_ssh"

  vars += config
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config

  assign where host.vars.check_http == true
}

apply Service for (tcp_check => config in host.vars.tcp_checks) {
  import "generic-service"

  check_command = "tcp"

  vars += config

  assign where host.vars.check_tcp == true
}

apply Service for (udp_check => config in host.vars.udp_checks) {
  import "generic-service"

  check_command = "udp"

  vars += config

  assign where host.vars.check_udp == true
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.check_disks == true
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.name

  assign where host.vars.check_icinga == true
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.name
  vars.load_percpu = true
  vars.load_wload1 = "0.9"
  vars.load_wload5 = "0.7"
  vars.load_wload15 = "0.5"
  vars.load_cload1 = "1.0"
  vars.load_cload5 = "0.8"
  vars.load_cload15 = "0.6"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service for (proc => config in host.vars.procs) {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  command_endpoint = host.name
  assign where host.vars.check_swap == true
}

apply Service "users" {
  import "generic-service"

  check_command = "users"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
}

apply Service for (imap_host => config in host.vars.imap_hosts) {
  import "generic-service"

  check_command = "imap"

  vars += config
}

apply Service for (smtp_host => config in host.vars.smtp_hosts) {
  import "generic-service"

  check_command = "smtp"

  vars += config
}

apply Service for (ldap_host => config in host.vars.ldap_hosts) {
  import "generic-service"

  check_command = "ldap"

  vars += config
}

apply Service for (mysql_host => config in host.vars.mysql_hosts) {
  import "generic-service"

  check_command = "mysql"

  vars += config
}

apply Service for (redis_host => config in host.vars.redis_hosts) {
  import "generic-service"

  check_command = "redis"

  vars += config
}
